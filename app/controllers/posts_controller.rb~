class PostsController < ApplicationController
	def new
	end

	def create
		@ranking = registerUser(params[:post][:username],params[:post][:path])
		render text: @ranking.inspect
	end

	def match_normal
		@result = match(params[:id],false)
		render text: @result.inspect
	end

	def match_casual
		@result = match(params[:id],true)
		render text: @result.inspect
	end

#returns 3 names and 3 paths. e.g. [["felix","seiji","sakamoto"],["./felix.js","./seiji.js","./saka.rb"]]
	def match _name, _casualMode
		if _casualMode
			#execute "select casual_mmr from ranking where name=#{_name}"
			#result as 'mmr'
			mmr = Ranking.find(_name).casual_mmr
			#execute "select path from ranking where name<>#{_name} order by abs(casual_mmr-#{mmr}) asc limit 3"
			#result as '_path'
			query = Ranking.where.not("name==\"#{_name}\"").order("abs(casual_mmr-#{mmr})").first(3)
			_names = query.name
			_paths = query.path
			
		else
			#execute "select mmr from ranking where name=#{_name}"
			#result as 'mmr'
			mmr = Ranking.find(_name).mmr
			#execute "select path from ranking where name<>#{_name} order by abs(mmr-#{mmr}) asc limit 3"
			#result as 'path'
			query = Ranking.where.("name<>#{_name}").order("abs(mmr-#{mmr})").first(3)
			_names = query.name
			_paths = query.path
		end
		return _names,_path
	end

	#upon finishing a game. No return value.
	def updateMMR winner, losers, casualMode
		if causalMode
			alias updatemmr updateCasualMMR
			#execute "select casual_mmr from ranking where name=#{_name}"
			#result as 'w_mmr'
			w_mmr = Ranking.find(_name).casual_mmr
			#execute "select distinct name,casual_mmr from ranking where name in (#{losers[0]}, #{losers[1]}, #{losers[2]})"
			rec = Ranking.where(name: losers).distinct
		else
			alias updatemmr updateRankedMMR
			#execute "select mmr from ranking where name=#{_name}"
			#result as 'w_mmr'
			w_mmr = Ranking.find(_name).mmr
			#execute "select distinct name,mmr from ranking where name in (#{losers[0]}, #{losers[1]}, #{losers[2]})"
			rec = Ranking.where(name: losers).distinct
		end
		#update mmr using modified ELO ranking for multiple players
		#http://forum.unity3d.com/threads/81579-ELO-ratings-for-multiplayer-game
		#for winner
		sum = 0
		rec.each do |loser, mmr|
			sum = sum + 25*(1-GetExpectedScore(w_mmr, mmr))
		end
		updatemmr winner w_mmr+sum
		#for each loser
		rec.each do |loser, mmr|
			sum = 0
			rec.each do |loser2, mmr2|
				sum = sum + 25*(-GetExpectedScore(mmr, mmr2))
			end
			sum = sum + 25*(-GetExpectedScore(mmr,w_mmr))
			updatemmr loser mmr+sum
		end
	end

	def registerUser _name, _path
		#execute "insert into ranking values(#{_name},#{_path},0,0)"
		@ranking = Ranking.new(name:_name, path:_path, casual_mmr:0, mmr:0)
		@ranking.save
		return @ranking
#		Ranking.create(name:_name, path:_path, casual_mmr:0, mmr:0)
#		Ranking.save
	end

	protected
		def GetExpectedScore rp, ro
			1/(1+10.0**((rp-ro)/400.0))
		end
		

		def updateCasualMMR _name, _value
			#execute "update casual_mmr=#{_value} FROM ranking WHERE name == #{_name}"
			rec = Ranking.find(_name)
			rec.casual_mmr = _value
			rec.save
		end

		def updateRankedMMR _name, _value
			#execute "update mmr=#{_value} FROM ranking WHERE name == #{_name}"
			rec = Ranking.find(_name)
			rec.mmr = _value
			rec.save
		end
end
