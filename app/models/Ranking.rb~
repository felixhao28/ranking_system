class Ranking < ActiveRecord::Base
	
	self.table_name = "ranking"
	self.primary_key = "name"

	#returns 3 names and 3 paths. e.g. [["felix","seiji","sakamoto"],["./felix.js","./seiji.js","./saka.rb"]]
	def match @name, @casualMode
		if @casualMode
			#execute "select casual_mmr from ranking where name=#{@name}"
			#result as 'mmr'
			mmr = Ranking.find(@name).casual_mmr
			#execute "select path from ranking where name<>#{@name} order by abs(casual_mmr-#{mmr}) asc limit 3"
			#result as '@path'
			query = Ranking.where.not("name==#{@name}").order("abs(casual_mmr-#{mmr})").first(3)
			@names = query.name
			@paths = query.path
			
		else
			#execute "select mmr from ranking where name=#{@name}"
			#result as 'mmr'
			mmr = Ranking.find(@name).mmr
			#execute "select path from ranking where name<>#{@name} order by abs(mmr-#{mmr}) asc limit 3"
			#result as 'path'
			query = Ranking.where.not("name==#{@name}").order("abs(mmr-#{mmr})").first(3)
			@names = queyr.name
			@paths = query.path
		end
		return @names,@path
	end

	#upon finishing a game. No return value.
	def updateMMR winner, losers, casualMode
		if causalMode
			alias updatemmr updateCasualMMR
			#execute "select casual_mmr from ranking where name=#{@name}"
			#result as 'w_mmr'
			w_mmr = Ranking.find(@name).casual_mmr
			#execute "select distinct name,casual_mmr from ranking where name in (#{losers[0]}, #{losers[1]}, #{losers[2]})"
			rec = Ranking.where(name: losers).distinct
		else
			alias updatemmr updateRankedMMR
			#execute "select mmr from ranking where name=#{@name}"
			#result as 'w_mmr'
			w_mmr = Ranking.find(@name).mmr
			#execute "select distinct name,mmr from ranking where name in (#{losers[0]}, #{losers[1]}, #{losers[2]})"
			rec = Ranking.where(name: losers).distinct
		end
		#update mmr using modified ELO ranking for multiple players
		#http://forum.unity3d.com/threads/81579-ELO-ratings-for-multiplayer-game
		#for winner
		sum = 0
		rec.each do |loser, mmr|
			sum = sum + 25*(1-GetExpectedScore(w_mmr, mmr))
		end
		updatemmr winner w_mmr+sum
		#for each loser
		rec.each do |loser, mmr|
			sum = 0
			rec.each do |loser2, mmr2|
				sum = sum + 25*(-GetExpectedScore(mmr, mmr2))
			end
			sum = sum + 25*(-GetExpectedScore(mmr,w_mmr))
			updatemmr loser mmr+sum
		end
	end

	protected
		def GetExpectedScore Rp, Ro
			1/(1+10.0**((Rp-Ro)/400.0))
		end
		
		def registerUser @name, @path
			#execute "insert into ranking values(#{@name},#{@path},0,0)"
			Ranking.create(name:@name, path:@path, causal_mmr:0, mmr:0)
		end

		def updateCasualMMR @name, @value
			#execute "update casual_mmr=#{@value} FROM ranking WHERE name == #{@name}"
			rec = Ranking.find(@name)
			rec.casual_mmr = @value
			rec.save
		end

		def updateRankedMMR @name, @value
			#execute "update mmr=#{@value} FROM ranking WHERE name == #{@name}"
			rec = Ranking.find(@name)
			rec.mmr = @value
			rec.save
		end
end
